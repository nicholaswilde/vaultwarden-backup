{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vaultwarden Backup","text":"<p>A simple setup for backing up Vaultwarden (formerly bitwarden_rs) data/config to cloud storage.</p> <p>Note</p> <p>This is a fork of Jeremy Lin's Vaultwarden Backup</p>"},{"location":"#tldr","title":"TL;DR","text":"<pre><code>sudo apt install rclone sqlite3\nsudo apt install apprise # bookworm\n# or\npipx install apprise # other\n</code></pre> <p>Setup <code>rclone</code></p> <pre><code>cd /opt/vaultwarden\ngit clone https://github.com/nicholaswilde/vaultwarden-backup.git backup\ncd backup\ncp backup.conf.tmpl backup.conf\n(crontab -l 2&gt;/dev/null; cat crontab.tmpl) | crontab -\n</code></pre> <p>Edit <code>backup.conf</code></p> <pre><code>./backup.sh\n</code></pre>"},{"location":"#overview","title":"Overview","text":"<p>Note</p> <p>Vaultwarden was formerly known as bitwarden_rs.</p> <p>This repo contains my automated setup for SQLite-based Vaultwarden backups. It's designed solely to meet my own backup requirements (i.e., not to be general purpose):</p> <ol> <li> <p>Generate a single archive with a complete backup of all Vaultwarden data    and config on a configurable schedule.</p> </li> <li> <p>Retain backup archives on the local Vaultwarden host for a configurable    number of days.</p> </li> <li> <p>Upload encrypted copies of the backup archives to one or more cloud    storage services using rclone. The retention policy    is configured/managed at the storage service level.</p> </li> <li> <p>Return success when all backup archives are successfully uploaded,    or failure if any uploads fail. This allows cron monitoring services like    Healthchecks.io, Cronitor,    or Dead Man\u2019s Snitch to provide notification    of backup failures.</p> </li> </ol> <p>Tip</p> <p>This single-archive backup scheme isn't space-efficient if your vault includes large file attachments, as they will be re-uploaded with each backup. If this is an issue, you might consider modifying the script to use restic instead.</p>"},{"location":"#deviations","title":"Deviations","text":"<p>The deviations of this fork are:</p> <ol> <li><code>apprise</code> notifications.</li> <li>Additional documentation and variables in <code>backup.conf</code>.</li> <li>Enable <code>GPG</code> or <code>age</code> encryption if passphrase is blank.</li> <li>Use <code>gpg</code> and <code>age</code> keys rather than passphrases.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>For the most part, I'm not looking for contributions or feature requests, as this repo is only intended to implement my own backup requirements. I may be willing to make some minor generalizations to make it easier for people to use the repo without modification, but aside from that, feel free to fork and modify this setup to fit your own needs.</p>"},{"location":"#license","title":"License","text":"<p>\u200bLICENSE</p>"},{"location":"#author","title":"\u200bAuthor","text":"<p>\u200bThis project was forked in 2025 by \u200bNicholas Wilde\u200b.</p>"},{"location":"#references","title":"References","text":""},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#clone-repository","title":"Clone Repository","text":"<p>Start by cloning this repo to the directory containing your Vaultwarden data directory, under the name <code>backup</code>. In my setup, it looks like this:</p> <pre><code>cd /opt/vaultwarden\ngit clone https://github.com/nicholaswilde/vaultwarden-backup.git backup\ncd backup\n</code></pre> <pre><code>/opt/vaultwarden  # Top-level Vaultwarden directory\n\u251c\u2500\u2500 backup         # This backup repo\n\u2514\u2500\u2500 data           # Vaultwarden data directory\n</code></pre>"},{"location":"configuration/#backupconf-file","title":"<code>backup.conf</code> File","text":"<p>Copy the <code>backup.conf.tmpl</code> file to <code>backup.conf</code>.</p> /opt/vaultwarden/backup<pre><code>cp backup.conf.tmpl backup.conf\n</code></pre>"},{"location":"configuration/#encryption","title":"Encryption","text":"<p>If you want encrypted backup archives using <code>gpg</code>, set the <code>GPG_PASSPHRASE</code> variable accordingly. If you want to encrypt using <code>age</code> instead, set the <code>AGE_PASSPHRASE</code> variable. If both variables are set, only <code>gpg</code> encryption will be performed. If you don't want encryption at all, comment out both variables or set them to be blank.</p> <p>This passphrase is used to encrypt the backup archives, which may contain somewhat sensitive data in plaintext in <code>config.json</code> (the password entries themselves are already encrypted by Bitwarden). It should be something easy enough for you to remember, but complex enough to deter, for example, any unscrupulous cloud storage personnel who might be snooping around. As this passphrase is stored on disk in plaintext, it definitely should not be your Bitwarden master passphrase or anything similar.</p> <p>Encryption keys may be used to encrypt the archives as well. Set  <code>GPG_FINGERPRINT</code> for <code>gpg</code> or <code>AGE_FILE_PATH</code> for <code>age</code>.</p> <p><code>GPG_FINGERPRINT</code> should be in the format of <code>0x12345678</code>, where 1-8 are the last 8 characters of the fingerprint.</p> <pre><code>gpg --fingerprint\n</code></pre> <p>Note</p> <p>gpg keys need to already be present in the key ring.</p> <p><code>AGE_FILE_PATH</code> is the location of <code>keys.txt</code>. My location is in the SOPS config directory.</p> <pre><code>AGE_FILE_PATH=${HOME}/.config/sops/age/keys.txt\n</code></pre> <p>The order of precedence for the encryption is:</p> <ol> <li><code>GPG_FINGERPRINT</code></li> <li><code>GPG_PASSPHRASE</code></li> <li><code>AGE_FILE_PATH</code></li> <li><code>AGE_PASSPHRASE</code> </li> </ol> <p>rclone crypt is another option for encrypted archives. If you prefer to use this method, just set <code>GPG_PASSPHRASE</code> to be blank, configure rclone crypt appropriately, and use the crypt remote in <code>RCLONE_DESTS</code>.</p>"},{"location":"configuration/#binary-paths","title":"Binary Paths","text":"<p>Binary paths can be changed by setting their respective variables in <code>backup.conf</code>.</p> <ol> <li><code>SQLITE3</code></li> <li><code>RCLONE</code></li> <li><code>GPG</code></li> <li><code>AGE</code></li> <li><code>APPRISE</code></li> </ol> Find binary path<pre><code>which &lt;binary&gt;\n</code></pre>"},{"location":"configuration/#rclone-destinations","title":"<code>rclone</code> Destinations","text":"<p>Change <code>RCLONE_DESTS</code> to your list of rclone destinations. You'll have to configure rclone appropriately first.</p> <p>Note</p> <p><code>backup.conf</code> is simply sourced into the <code>backup.sh</code> script, so you can add arbitrary environment variables into <code>backup.conf</code> as needed. This can be useful for configuring any tools called from <code>backup.sh</code>, such as <code>rclone</code>.</p>"},{"location":"configuration/#notifications","title":"Notifications","text":"<p><code>apprise</code> can be enabled by setting <code>APPRISE_EMAIL</code> in <code>backup.conf</code>.</p>"},{"location":"configuration/#crontabtmpl","title":"<code>crontab.tmpl</code>","text":"<p>Modify the <code>backup/crontab.tmpl</code> file as needed. This crontab actually calls <code>cron.sh</code> to run the backup, rather than calling <code>backup.sh</code> directly. Currently, <code>cron.sh</code> captures the output of the current run of <code>backup.sh</code> to a <code>backup.log</code> file. It also saves a copy of this log file, named according to whether the backup run was a success or failure. You can add other custom logic to <code>cron.sh</code> if needed, such as signaling failure to a cron monitoring service.</p> <ol> <li> <p>If <code>/opt/vaultwarden</code> isn't your top-level Vaultwarden directory, adjust    the paths in this file accordingly.</p> </li> <li> <p>Review the backup schedule. I generate backup archives hourly, but you    might prefer to do this less frequently to save space.</p> </li> <li> <p>Review the local backup archive retention policy. I delete archives    older than 14 days (<code>-mtime +14</code>). Adjust this if needed.</p> </li> <li> <p>Review the log file retention policy. I delete log files older than    14 days (<code>-mtime +14</code>). Adjust this if needed.</p> </li> <li> <p>Review the SQLite VACUUM schedule,    or remove the job if you don't want vacuuming. Vacuuming compacts the    database file so that operations are faster and backups are smaller.</p> </li> </ol> <p>Install the crontab under a user (typically your normal login) that can read your Vaultwarden data. In many cases, running <code>crontab -e</code> and pasting the contents of the filled-in crontab template file should work. Note that if your cron user doesn't have write permissions to the database, then you must ensure it has write permissions to the Vaultwarden data directory, as SQLite may need to create a <code>-wal</code> file for the database if it doesn't already exist. If it's unable to do this, the backup will fail with an <code>attempt to write a readonly database</code> error. (For more details, see https://sqlite.org/wal.html#read_only_databases.)</p> AutomaticManual <pre><code>(crontab -l 2&gt;/dev/null; cat crontab.tmpl) | crontab -\n</code></pre> <pre><code>crontab -e\n</code></pre>"},{"location":"prerequisites/","title":"Prerequisites","text":""},{"location":"prerequisites/#vaultwarden","title":"Vaultwarden","text":"<p>A standard Unix-like (preferably Linux) host running Vaultwarden.</p> <p>Note</p> <p>I'm running this in Proxmox and so I've used the ProxmoxVE community script</p> <pre><code>bash -c \"$(wget -qLO - https://github.com/community-scripts/ProxmoxVE/raw/main/ct/vaultwarden.sh)\"\n</code></pre>"},{"location":"prerequisites/#cron-daemon","title":"Cron Daemon","text":"<p>A <code>cron</code> daemon. This is used to run backup actions on a scheduled basis.</p> <pre><code>sudo apt install cron\n</code></pre>"},{"location":"prerequisites/#sqlite","title":"Sqlite","text":"<p>An <code>sqlite3</code> binary. This is used to back up the SQLite database. This can be installed via the <code>sqlite3</code> package on Debian/Ubuntu or the <code>sqlite</code> package on RHEL/CentOS/Fedora.</p> <pre><code>sudo apt install sqlite3\n</code></pre>"},{"location":"prerequisites/#rclone","title":"rclone","text":"<p>An <code>rclone</code> binary. This is used to copy the backup archives to cloud storage. This can be installed via the <code>rclone</code> package on Debian/Ubuntu and RHEL/CentOS/Fedora (EPEL required for RHEL/CentOS), but as rclone changes more rapidly, it's probably best to just use the latest binary from https://rclone.org/downloads/.</p> <pre><code>sudo apt install rclone\n</code></pre>"},{"location":"prerequisites/#cloud-storage","title":"Cloud Storage","text":"<p>An account at one or more cloud storage services supported by <code>rclone</code>. If you don't have one yet, here are a few cloud storage services that offer a free tier:</p> <ul> <li>Backblaze B2 (10 GB)</li> <li>Box (10 GB)</li> <li>Cloudflare R2 (10 GB)</li> <li>Dropbox (2 GB)</li> <li>Google Drive (15 GB)</li> <li>Microsoft OneDrive (5 GB)</li> <li>Oracle Cloud (10 GB)</li> </ul> <p>I am using Google Drive with the remote named <code>drive</code>.</p> <p>I am also using a headless server and so I needed to use this method to authenticate.</p>"},{"location":"prerequisites/#gpg-optional","title":"gpg (optional)","text":"<p><code>gpg</code> (GnuPG 2.x) to encrypt the archive. This can be installed via the <code>gnupg</code> package on Debian/Ubuntu or the <code>gnupg2</code> package on RHEL/CentOS/Fedora.</p>"},{"location":"prerequisites/#age-optional","title":"age (optional)","text":"<p><code>age</code> to encrypt the archive. This option requires a custom version of the tool that supports reading the passphrase from an environment variable.</p>"},{"location":"prerequisites/#apprise-optional","title":"apprise (optional)","text":"<p><code>apprise</code> can be used to send notifications with the job status.</p> Installation<pre><code>sudo apt install apprise # bookworm\n# or\npipx install apprise # other\n</code></pre> <p>Send test email</p> <pre><code>apprise -vv -t 'my title' -b 'my notification body' 'mailto://email:passkey@gmail.com'\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#gpg","title":"gpg","text":"<p>Most errors using gpg keys are related either to the gpg key or subkey being expired or the key or subkey is not trusted.</p>"},{"location":"troubleshooting/#trust-key","title":"Trust Key","text":"<pre><code>gpg --edit-key &lt;key-id&gt;\nSecret key is available.\ngpg&gt; trust\nPlease decide how far you trust this user to correctly verify other users' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don't know or won't say\n  2 = I do NOT trust\n  3 = I trust marginally\n  4 = I trust fully\n  5 = I trust ultimately\n  m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\ngpg&gt; save\n</code></pre>"},{"location":"troubleshooting/#change-expiry-date","title":"Change Expiry Date","text":"<p>Identify the sub key that needs the expiry date changed.</p> <pre><code>gpg --edit-key &lt;key-id&gt;\ngpg&gt; list\n\nsec  rsa2048/AF4RGH94ADC84\n     created: 2019-09-07  expires: 2020-11-15  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/56ABDJFDKFN\n     created: 2019-09-07  expired: 2019-09-09  usage: E\n[ultimate] (1). Jill Doe (CX) &lt;jilldoe@mail.com&gt;\n</code></pre> <p>Select the sub key (<code>ssb</code>)</p> <pre><code>gpg&gt; key 1\n\nsec  rsa2048/AF4RGH94ADC84\n     created: 2019-09-07  expires: 2020-11-15  usage: SC\n     trust: ultimate      validity: ultimate\nssb*  rsa2048/56ABDJFDKFN\n     created: 2019-09-07  expired: 2019-09-09  usage: E\n[ultimate] (1). Jill Doe (CX) &lt;jilldoe@mail.com&gt;\n\ngpg&gt; expire\n...\nChanging expiration time for a subkey.\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\n\nKey is valid for? (0) 2y\nKey expires at Wed 9 Sep 16:20:33 2021 GMT\nIs this correct? (y/N) y\ngpg&gt; save\n</code></pre>"},{"location":"troubleshooting/#rclone","title":"rclone","text":"<p>Upload a test file.</p> <pre><code>rclone --syslog -vv --no-check-dest copy test.txt \"drive:vaultwarden\"\n</code></pre>"},{"location":"troubleshooting/#apprise","title":"apprise","text":"<p>Send test email.</p> <pre><code>apprise -vv -t 'my title' -b 'my notification body' 'mailto://email:passkey@gmail.com'\n</code></pre>"},{"location":"troubleshooting/#logs","title":"Logs","text":"<p>Logs can be shown by running the following</p> <pre><code>sudo journalctl -t rclone --no-pager\nsudo journalctl -t vaultwarden-backup --no-pager\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Test the backup.</p> /opt/vaultwarden/backup<pre><code>./backup.sh\n</code></pre> <p>If everything is working properly, you should see the following:</p> <ol> <li>Backup archives generated under <code>backup/archives</code>.</li> <li>Encrypted backup archives uploaded to your configured rclone destination(s).</li> </ol> <p>Example</p> <pre><code>/opt/vaultwarden/backup\n\u251c\u2500\u2500 archives\n\u2502   \u251c\u2500\u2500 vaultwarden-20210101-0000.tar.xz\n\u2502   \u251c\u2500\u2500 vaultwarden-20210101-0000.tar.xz.gpg\n\u2502   \u251c\u2500\u2500 vaultwarden-20210101-0100.tar.xz\n\u2502   \u251c\u2500\u2500 vaultwarden-20210101-0100.tar.xz.age\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 backup.conf\n\u251c\u2500\u2500 backup.conf.tmpl\n\u251c\u2500\u2500 backup.sh\n\u251c\u2500\u2500 crontab.tmpl\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre>"}]}